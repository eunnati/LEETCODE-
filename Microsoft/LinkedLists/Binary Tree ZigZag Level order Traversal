/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        
        List<List<Integer>> res = new ArrayList<>();
        
        if(root == null){
            return res;
        }
        
        Stack<TreeNode> s1 = new Stack<>(); //l to r
        Stack<TreeNode> s2 = new Stack<>(); // r to l
        
        s1.push(root);
        
        List<Integer> cur = new ArrayList<>();
       
        while(!s1.isEmpty() || !s2.isEmpty()){
            
            while(!s1.isEmpty()){
                TreeNode current = s1.pop();
                cur.add(current.val);
                if(current.left!=null){
                    s2.push(current.left);
                }
                if(current.right!=null){
                    s2.push(current.right);
                }
            }
            if(!cur.isEmpty()){
                res.add(new ArrayList(cur));
            }
            
            cur.clear();
            while(!s2.isEmpty()){
                TreeNode current = s2.pop();
                cur.add(current.val);
                if(current.right!=null){
                    s1.push(current.right);
                }
                if(current.left!=null){
                    s1.push(current.left);
                }
            }
             if(!cur.isEmpty()){
            res.add(new ArrayList(cur));
             }
            cur.clear();
        }
        
        return res;
        
        
        
    }
}